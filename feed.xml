<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://yuhala.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yuhala.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-19T09:40:56+02:00</updated><id>https://yuhala.github.io/feed.xml</id><title type="html">blank</title><subtitle>Peterson Yuhala&apos;s personal website. </subtitle><entry><title type="html">The Cantor-Schröder-Bernstein theorem</title><link href="https://yuhala.github.io/blog/2024/cbs/" rel="alternate" type="text/html" title="The Cantor-Schröder-Bernstein theorem"/><published>2024-07-08T15:00:00+02:00</published><updated>2024-07-08T15:00:00+02:00</updated><id>https://yuhala.github.io/blog/2024/cbs</id><content type="html" xml:base="https://yuhala.github.io/blog/2024/cbs/"><![CDATA[<h3 id="definition">Definition</h3> <p>If \(A\) and \(B\) are sets with \(|A| \leq |B|\) and \(|B| \leq |A|\), then \(|A|=|B|\). In other words, if there are injections \(f:A \longrightarrow B\) and \(g:B \longrightarrow A\), then there is a bijection \(h:A \longrightarrow B\).</p> <h3 id="proof">Proof</h3> <p>This theorem seems to be straightforward and one might expect that is has an easy proof. However, no known proof of this theorem is ”easy” to explain, even without using advanced mathematics. To put this into perspective, Ernst Schröder (whose name appears in the theorem title) published a flawed proof in 1898.</p> <p>To provide a more interesting perspective on the proof of the theorem, we will make use of <a href="https://en.wikipedia.org/wiki/Hilbert%27s_paradox_of_the_Grand_Hotel#:~:text=4%20References-,The%20paradox,each%20expecting%20their%20own%20room.">Hilbert’s Grand Hotel paradox</a>, a famous thought experiment formulated by German Mathematician David Hilbert. It shows the counter-intuitive properties of infinite sets. Hilbert used it as an example to show how infinity does not act in the same was as regular numbers do.</p> <p><strong>Hilbert’s paradox</strong>: Hilbert invented the notion of the Grand Hotel, which has a <code class="language-plaintext highlighter-rouge">countably infinite</code> number of rooms, each occupied by a guest. However, when a new guest arrives, it is always possible to find a room for this guest without evicting a current guest from the hotel. The paradox here is that even though the hotel was initially <code class="language-plaintext highlighter-rouge">fully occupied</code>, it can always make room for additional guests without evicting current guests.</p> <p>Because the rooms of the Grand Hotel are countable, we can list them as room 1, room 2, room 3, and so on. When a new guest arrives, we move the guest in room 1 to room 2, the guest in room 2 to room 3, and in general, the guest in room n to room n + 1, for all positive integers n. This frees up room 1, which we assign to the new guest, and all the current guests still have rooms.</p> <p>Similarly, if a countably infinite number of new guests arrive, we move the guest in room \(n\) to room \(2n\). This frees up all the odd number rooms \((2n − 1)\), which can then be occupied by the infinite number of guests.</p> <p>When dealing with a finite number of rooms in a hotel, the notion that all rooms are occupied is equivalent to the notion that no new guests can be accommodated. However, Hilbert’s paradox of the Grand Hotel can be explained by noting that this equivalence no longer holds when there are infinitely many rooms.</p> <p>Now, going back to the original Cantor-Schröder-Bernstein (CSB) theorem, we can draw a connection between Hilbert’s infinite hotel and the theorem by considering set A as hotel guests, and set B as rooms in the hotel. Our objective is to map each guest to a distinct room (ensuring that no two guests share a room) and ensure that all the rooms are occupied at the end of the process. In other words, we want to construct a bijection between sets \(A\) and \(B\). Function \(f\) associates a guest to a room, while function \(g\) tells us which guest occupies a specific room.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/hilbert-hotel.png" alt="" title=""/> </div> </div> <p>We shall focus on set \(A_0 = A − g(B)\), the new guests who don’t have rooms yet. That is, the elements of \(A\) that are not in the image of \(B\) under \(g\). We can find rooms for them using \(f\) with the mapping: \(f(A_0)\). However, there could already be guests occupying the rooms \(f(A_0)\), so we will need to move these guests \(A_1\) to new rooms. But first we need to know the guests to be moved by using function \(g\) which gives us: \(A_1 = g(f(A_0))\). Similarly, we can use f to find rooms for them by doing \(f(A_1) = f(g(f(A_0)))\), and we will repeat this infinitely many times. We can formalize this to obtain the following definitions:</p> <p>\(A_0 = A - g(B)\)<br/> \(A_{n+1} = gf(A_n)\)<br/> \(A_\infty = \bigcup\limits_{n=0}^{\infty} A_n\)</p> <p>We can then define \(h:A \longrightarrow B\) as follows: \(\begin{cases} f(x) &amp; x\in A_\infty\\ g^{-1}(x) &amp; x\in A-A_\infty \end{cases}\)</p> <p>What this means in terms of the hotel is, if guest \(x\) is a new guest or a guest that is being displaced, we will find a room for guest \(x\) using \(f(x)\). Otherwise, if guest \(x\) is not being displaced, we will simply leave the guest in the room they currently occupy, i.e., \(g^{-1}(x)\). We just need to show that h is indeed bijective.</p> <h3 id="showing-h-is-injective">Showing h is injective</h3> <p>For \(x, y \in A\), suppose \(h(x) = h(y)\). We have 4 possibilities:</p> <ol> <li>\(x, y \in A_\infty\) : This means \(f(x) = f(y) \implies x = y\), since \(f\) is injective.</li> <li>\(x, y \in A_\infty\): This means \(g^{-1}(x) = g^{-1}(y) \implies x = y\), since \(g\) is injective.</li> <li>\(x \in A_\infty\) and \(y \in A - A_\infty\): \(x \in A_\infty\) means \(x \in A_n\) for some \(n\). So \(h(x) = h(y) \implies f(x) = g^{-1}(y)\), so \(y = g(f(x)) \in g(f(A)) = A_{n+1}\); this is a contradiction since y is suppposed to be in \(A - A_\infty\).</li> <li>\(x \in A - A_\infty\) and \(y \in A - A_\infty\): this is symmetric to case 2, and so is covered without loss of generality.</li> </ol> <h3 id="showing-h-is-surjective">Showing h is surjective</h3> <p>TODO</p> <h3 id="references">References</h3> <ul> <li><a href="https://billcookmath.com/courses/math2510-spring2010/Schroder-Bernstein.pdf">Bill Cook Math</a></li> <li><a href="https://www.youtube.com/watch?v=IkoKttTDuxE&amp;feature=youtu.be">Youtube: Cantor-Schröder-Bernstein theorem</a></li> <li><a href="https://math24.net/cantor-schroder-bernstein-theorem.html">Math24 Set Theory</a></li> </ul>]]></content><author><name></name></author><category term="math"/><category term="math"/><summary type="html"><![CDATA[Intuitive proof of the Cantor-Schröder-Bernstein theorem]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://yuhala.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-24T01:20:09+02:00</published><updated>2022-04-24T01:20:09+02:00</updated><id>https://yuhala.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://yuhala.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Programming with Makefiles</title><link href="https://yuhala.github.io/blog/2021/makefiles/" rel="alternate" type="text/html" title="Programming with Makefiles"/><published>2021-08-20T12:24:00+02:00</published><updated>2021-08-20T12:24:00+02:00</updated><id>https://yuhala.github.io/blog/2021/makefiles</id><content type="html" xml:base="https://yuhala.github.io/blog/2021/makefiles/"><![CDATA[<blockquote> C programmers never die. They are just cast into void.<br/> --Alan Perlis </blockquote> <p>Hi all! Today we will be looking at <code class="language-plaintext highlighter-rouge">Makefiles</code>. First we will understand why we need them, after which we will dive into building a makefile for a simple C++ program. This tutorial is by no means exhaustive as to the capabilities of makefiles, but is intended as a helpful starting point for beginner programmers. This tutorial is adapted for a Linux environment.</p> <p>Makefiles are used to automate the build process for large projects. They are very common for C/C++ projects but can be used for other purposes once understood. To better appreciate the need for makefiles, let’s consider the following C++ program which creates an object that prints a message to the terminal. Our program consists of a header file <code class="language-plaintext highlighter-rouge">message.hpp</code> which defines a <code class="language-plaintext highlighter-rouge">class Message</code>, a C++ source file <code class="language-plaintext highlighter-rouge">message.cpp</code> which defines the methods of <code class="language-plaintext highlighter-rouge">class Message</code>, and a second C++ file which defines the <code class="language-plaintext highlighter-rouge">main</code> entrypoint of the program. The contents of the files are as follows:</p> <hr/> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <tt>message.hpp</tt> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="cp">#ifndef MESSAGE_HPP
#define MESSAGE_HPP
</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>

<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">hello</span><span class="p">();</span>
<span class="p">};</span>

<span class="cp">#endif </span><span class="cm">/* MESSAGE_HPP */</span>
</pre></td></tr></tbody></table></code></pre></figure> </div> <div class="col-sm mt-3 mt-md-0"> <tt>message.cpp</tt> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="cp">#include</span> <span class="cpf">"message.hpp"</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">hello</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello Peterson!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> </div> <div class="col-sm mt-3 mt-md-0"> <tt>main.cpp</tt> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="cp">#include</span> <span class="cpf">"message.hpp"</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Message</span> <span class="n">m</span><span class="p">;</span>
    <span class="n">m</span><span class="p">.</span><span class="n">hello</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> </div> </div> <hr/> <p>The files are placed following the directory structure below:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app
|───src
|   |───headers
|   |   | message.hpp
|   | message.cpp
|   | main.cpp
|       
</code></pre></div></div> <p>To compile the program files into an executable binary <code class="language-plaintext highlighter-rouge">app</code>, we can run the following command from within the <code class="language-plaintext highlighter-rouge">app</code> directory: <code class="language-plaintext highlighter-rouge">g++ src/main.cpp src/message.cpp -Isrc/headers -o app -lstdc++</code>. Here the <code class="language-plaintext highlighter-rouge">g++</code> (GNU C++) compiler compiles the <code class="language-plaintext highlighter-rouge">.cpp</code> files into object files <code class="language-plaintext highlighter-rouge">.o</code> which are then bundled up by the linker to create the final executable binary <code class="language-plaintext highlighter-rouge">app</code>.</p> <p>The figure below summarises this process:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/compilation.jpg" alt="" title=""/> </div> </div> <p>We can then run our executable file with <code class="language-plaintext highlighter-rouge">./app</code>.</p> <p>Now this is nice and simple when we have a small project with just 2 or 3 source files to compile. Imagine a scenario where we had hundreds or thousands of source files. Using the above command becomes extremely tedious. Moreover, doing the above will recompile each file every time, regardless of whether it was modified or not. This is very inefficient, and here is where makefiles come into the picture.</p> <hr/> <h3 id="structure-of-a-makefile">Structure of a makefile</h3> <p>In its simplest form, the content of a makefile comprises chunks of instructions known as <code class="language-plaintext highlighter-rouge">rules</code> with the following structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>target: dependencies
    recipe
</code></pre></div></div> <p>A <code class="language-plaintext highlighter-rouge">target</code> is the output generated by the program, e.g <tt>executable files</tt> or <tt>object files</tt>. The <code class="language-plaintext highlighter-rouge">dependencies</code> or <code class="language-plaintext highlighter-rouge">prerequisites</code> are files used to create the target, e.g <tt>.c</tt>, <tt>.cpp</tt>, or <tt>.o</tt> files. And lastly, the <code class="language-plaintext highlighter-rouge">recipe</code> is a command or action that the make tool carries out to produce a target using the given dependencies. Note: we have a tab after <code class="language-plaintext highlighter-rouge">:</code> and just before <code class="language-plaintext highlighter-rouge">recipe</code>. This is an important detail to note because <code class="language-plaintext highlighter-rouge">trailing whitespaces</code> in makefiles are problematic and often tedious to fix.</p> <p>Going back to our example program, we have 3 outputs (our make <code class="language-plaintext highlighter-rouge">targets</code>): <code class="language-plaintext highlighter-rouge">message.o</code> (target 1) after compilation of <code class="language-plaintext highlighter-rouge">message.cpp</code> (a dependency), <code class="language-plaintext highlighter-rouge">main.o</code> (target 2) after compilation of <code class="language-plaintext highlighter-rouge">main.cpp</code>, and lastly the final binary, <code class="language-plaintext highlighter-rouge">app</code> (target 3), after linking <code class="language-plaintext highlighter-rouge">message.o</code>, <code class="language-plaintext highlighter-rouge">main.o</code> (its dependencies), and the C++ standard library <code class="language-plaintext highlighter-rouge">stdc++</code>. Targets <code class="language-plaintext highlighter-rouge">message.o</code> and <code class="language-plaintext highlighter-rouge">main.o</code> will have <code class="language-plaintext highlighter-rouge">message.hpp</code> as a dependency since they should be recompiled/rebuilt if that header file is changed.</p> <p>Using this information, we can create a very simple make file called <code class="language-plaintext highlighter-rouge">Makefile</code> in the <code class="language-plaintext highlighter-rouge">app directory</code>, and input 3 rules which will permit us to build the final program. The rules are as follows:</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>message.o: src/message.cpp src/headers/message.hpp
	g++ -Isrc/headers -c src/message.cpp -o message.o

main.o: src/main.cpp src/headers/message.hpp 
	g++ -Isrc/headers -c src/main.cpp -o main.o

app: message.o main.o
	g++ -Isrc/headers message.o main.o -o app -lstdc++
</code></pre></div></div> <hr/> <p>We can then build our program by running <code class="language-plaintext highlighter-rouge">make app</code> which will produce 3 files: <code class="language-plaintext highlighter-rouge">message.o</code>, <code class="language-plaintext highlighter-rouge">main.o</code>, and <code class="language-plaintext highlighter-rouge">app</code>. You notice that we instructed make to build the target <code class="language-plaintext highlighter-rouge">app</code> but make builds the first two targets because they are dependencies of <code class="language-plaintext highlighter-rouge">app</code>, and the make file contains rules to build them too. If the rule to build <code class="language-plaintext highlighter-rouge">message.o</code> or <code class="language-plaintext highlighter-rouge">main.o</code> was absent, make will inform you it cannot find the rule to build that dependency and exit sadly.</p> <h3 id="extended-makefile">Extended makefile</h3> <p>The makefile above is enough for us to understand the basic principles of make. However you will hardly see such simple makefiles in practice. You can have a look at a makefile from the linux kernel <a href="https://github.com/torvalds/linux/blob/master/Makefile">here</a> to have an idea. Frightful :fearful: right ? So in this section, we will extend our makefile so it looks much more professional and geeky:sunglasses:.</p> <p>If we observe our rules above, we notice some repetition such as <code class="language-plaintext highlighter-rouge">-Isrc/headers</code>, <code class="language-plaintext highlighter-rouge">src/headers/message.hpp</code> or even <code class="language-plaintext highlighter-rouge">g++</code>. These could be much longer in practice, which will lead to a very clumsy make file. This brings us to the idea of <code class="language-plaintext highlighter-rouge">make variables</code>. A variable in make is simply a name defined in the makefile to represent a string of text. It is good practice to name variables in all CAPITALS. If we define a variable <code class="language-plaintext highlighter-rouge">PATH := /path/to/file</code> (you can use <code class="language-plaintext highlighter-rouge">=</code> too), we can access its value with <code class="language-plaintext highlighter-rouge">$(PATH)</code>. You must define a variable before you try to reference its value.</p> <p>Using this knowledge, we shall define a few variables at the top of our previous make file as follows:</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CXX := g++

SRC := src
INCLUDE_PATHS := -Isrc/headers
COMPILE_FLAGS := $(INCLUDE_PATHS)
LD_FLAGS := -lstdc++

HEADERS := $(wildcard src/headers/*.hpp)

OBJ_NAMES := message.o main.o 
APP_OBJS := $(addprefix $(SRC)/,$(OBJ_NAMES))

APP_NAME := app
</code></pre></div></div> <hr/> <p>Most of the variable definitions above are self-explanatory except for a few. For the <code class="language-plaintext highlighter-rouge">HEADERS</code> variable, the <code class="language-plaintext highlighter-rouge">wildcard</code> syntax simply means <code class="language-plaintext highlighter-rouge">all the .hpp files in the src/headers folder</code>. The <code class="language-plaintext highlighter-rouge">OBJ_NAMES</code> variable is a list with the object file names. As for the <code class="language-plaintext highlighter-rouge">APP_OBJS</code> variable, the <code class="language-plaintext highlighter-rouge">addprefix</code> command appends <code class="language-plaintext highlighter-rouge">src/</code> to each of the object file names. So <code class="language-plaintext highlighter-rouge">APP_OBJS</code> expands to: <code class="language-plaintext highlighter-rouge">APP_OBJS := src/message.o src/main.o</code>.</p> <p>Next thing we notice is the set of rules. We observe that the rules for targets <code class="language-plaintext highlighter-rouge">message.o</code> and <code class="language-plaintext highlighter-rouge">main.o</code> are quite similar. Using make <a href="https://www.gnu.org/software/make/manual/html_node/Pattern-Intro.html#Pattern-Intro">patterns</a>, we can create a generic rule for both targets. We can also add an additional action in our rules to print messages. Using our newly defined variables, our new rule (for both targets: <code class="language-plaintext highlighter-rouge">message.o</code> and <code class="language-plaintext highlighter-rouge">main.o</code>) would look like this follows:</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(SRC)/%.o: $(SRC)/%.cpp $(HEADERS)
	@$(CXX) $(COMPILE_FLAGS) -c $&lt; -o $@
	@echo "CXX &lt;= $&lt;" 
</code></pre></div></div> <hr/> <p>It looks a bit frightful but we will break it down. <code class="language-plaintext highlighter-rouge">$(SRC)/%.o</code> is a <code class="language-plaintext highlighter-rouge">target-patten</code> which will match all object file names (targets) in the <code class="language-plaintext highlighter-rouge">src</code> directory. Similarly, <code class="language-plaintext highlighter-rouge">$(SRC)/%.cpp</code> is a <code class="language-plaintext highlighter-rouge">prereq-patten</code> which will match all the <code class="language-plaintext highlighter-rouge">.cpp</code> files in the src directory. The <code class="language-plaintext highlighter-rouge">@</code> symbol before an action prevents the full command from being printed to the terminal. <code class="language-plaintext highlighter-rouge">$&lt;</code> is an <a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables">automatic variable</a> which represents the <code class="language-plaintext highlighter-rouge">first prerequisite</code> in the rule (i.e <code class="language-plaintext highlighter-rouge">$(SRC)/%.cpp</code>) in our case, while <code class="language-plaintext highlighter-rouge">$@</code> is an automatic variable which represents the <code class="language-plaintext highlighter-rouge">target</code> of the rule (i.e <code class="language-plaintext highlighter-rouge">$(SRC)/%.o</code>). The rule with <code class="language-plaintext highlighter-rouge">echo</code> simply prints the prerequisite being compiled by g++.</p> <p>Similarly, we can create a more concise rule for the <code class="language-plaintext highlighter-rouge">app</code> target as follows:</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(APP_NAME): $(APP_OBJS)
	@$(CXX) $(COMPILE_FLAGS) $^ -o $@ $(LD_FLAGS)
</code></pre></div></div> <hr/> <p>This is similar to the generic rule above except for a new automatic variable <code class="language-plaintext highlighter-rouge">$^</code>. The latter represents <code class="language-plaintext highlighter-rouge">all the prerequisites</code> in the rule (i.e <code class="language-plaintext highlighter-rouge">$(APP_OBJS)</code> in our case).</p> <p>Our makefile looks really geeky and professional at the moment but we will add one final ingredient to the mix.</p> <h3 id="phony-targets">PHONY targets</h3> <p>Sometimes we may want a rule whose target is not necessarily a file. An example could be a rule to simply delete or <code class="language-plaintext highlighter-rouge">clean</code> previously compiled targets. We call the corresponding targets <code class="language-plaintext highlighter-rouge">PHONY targets</code>. The latter have no dependencies. We will define a PHONY target called <code class="language-plaintext highlighter-rouge">clean</code> to delete all previously compiled files as follows:</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.PHONY: clean

clean:
	@rm $(APP_NAME) $(APP_OBJS) 
</code></pre></div></div> <hr/> <p>Now our makefile is complete !! You can bundle up the variable definitions, the two generic rules, and the last PHONY target rule into your makefile and rebuild your application again with the <code class="language-plaintext highlighter-rouge">make app</code> command in your terminal. To delete the previously compiled files, we simply type the command <code class="language-plaintext highlighter-rouge">make clean</code> in our terminal.</p> <p>For more in-depth information on make, you can visit the <a href="https://www.gnu.org/software/make/manual/html_node/">official site</a>.</p> <hr/> <p>Thanks for keeping up until this point. I hope you learnt alot. Stay tuned for the next tips in my tech diaries.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[automate your builds with make.]]></summary></entry><entry><title type="html">Productivity tools for every PhD student</title><link href="https://yuhala.github.io/blog/2021/phdtools/" rel="alternate" type="text/html" title="Productivity tools for every PhD student"/><published>2021-08-10T14:40:00+02:00</published><updated>2021-08-10T14:40:00+02:00</updated><id>https://yuhala.github.io/blog/2021/phdtools</id><content type="html" xml:base="https://yuhala.github.io/blog/2021/phdtools/"><![CDATA[<blockquote> Life is too complicated not to be orderly. --Martha Stewart </blockquote> <p>Hey there! Today I will give you a list of essential software tools to increase your productivity as a PhD student or researcher. This guide is written based on my experience as a graduate student in systems research. However, some points made here may be applicable to a broader audience. I classify these tools into 6 main categories:</p> <ul> <li><a href="#notes-taking">Notes taking</a></li> <li><a href="#reference-manager">Reference manager</a></li> <li><a href="#typesetting-software">Typesetting software</a></li> <li><a href="#plotting-and-data-analysis">Plotting and data analysis</a></li> <li><a href="#diagram-software">Diagram Software</a></li> <li><a href="#video-conferencing-and-team-communication">Video conferencing and Team communication</a></li> </ul> <hr/> <h2 id="notes-taking">Notes taking</h2> <p>As a PhD student or researcher, note taking is very essential, and you need to keep track of your ideas and thoughts as you go along. I recommend having both digital and manual note taking systems. For digital note taking <a href="https://evernote.com/">Evernote</a> is my favorite. Evernote is a very popular note taking software, is very flexible and helps you easily create notes with lists, images, links, etc. It synchronizes your data across various devices and provides browser plugins to search your notes via a normal google search, which I find pretty cool!</p> <p>In spite of the flexibility provided by digital note taking apps, sometimes its easier or more practical to write things down manually. For your manual note taking please get a <strong>book</strong>! Do not make the mistake I made of using sheets of paper because they will eventually pile up into a difficult-to-manage clutter.</p> <p>Evernote is also great for TODO lists, however the two I recommend for this purpose are <a href="https://asana.com/uses/to-do-list">Asana</a> and <a href="https://trello.com/en">Trello</a>.</p> <hr/> <h2 id="reference-manager">Reference manager</h2> <p>Getting a reference manager is vital and will prevent you unnecessarily filling your folders with PDF files, or trying to manually organize scientific papers. This will always cause lots of confusion eventually (e.g. due to poor naming). I have been there and I can attest it is painful to manually scan through folders searching for paper <tt>no_name.pdf</tt> you downloaded on date <tt>i-cannot-remember</tt>. Getting a reference manager will help preserve your mental sanity and save you valuable time.</p> <p>For this my top recommendation is <a href="https://www.mendeley.com/download-reference-manager/">Mendeley</a>. It is very intuitive, free (up to 2GB of cloud storage) and helps maintain your bibliography in perfect order. It also provides browser plugins which help you to easily add PDF references to your library. A simple click in the desktop app synchronizes your online references with those locally stored on your PC. This is especially useful when you work on different machines. Mendeley also enables you generate reference lists automatically, which comes in handy during thesis and paper writing.</p> <p>Other good reference manager apps are <a href="https://www.zotero.org/">Zotero</a> and <a href="https://endnote.com/">Endnote</a>.</p> <hr/> <h2 id="typesetting-software">Typesetting software</h2> <p>As you may have guessed, you will be doing lots of scientific writing as a researcher and PhD student. For this I recommend using <a href="https://www.latex-project.org/">LaTeX</a>. LaTeX is a high-quality typesetting software and is the de facto standard for the communication and publication of scientific documents. Luckily I got a good grip of LaTeX early on as a student; if you haven’t yet, fear not :hugs:, it isn’t too late. You can find great LaTeX tutorials online on <a href="https://www.overleaf.com/learn/latex/Tutorials">Overleaf</a> and Youtube. Overleaf provides you with a complete, ready to go LaTeX environment in the cloud, and nice templates to start off your LaTeX projects; isn’t that cool ? :nerd_face:</p> <p>I invite you to investigate LaTeX and learn how to use it; it is much better than MS-word, which is clunky and slow.</p> <hr/> <h2 id="plotting-and-data-analysis">Plotting and data analysis</h2> <p>As a researcher (especially in the sciences), you will need tools to analyze your data and plot graphs for you presentations, posters, papers, and thesis. A good free tool for this is <a href="https://www.r-project.org/about.html">R</a>. It is a programming language used for various kinds of data science, statistics and visualization projects. The learning curve is a little steep but it is worth learning. There are so many Youtube videos and online tutorials which will make learning R alot easier for you.</p> <p>More particularly for plotting, a second free and useful tool is <a href="http://www.gnuplot.info/">Gnuplot</a>. The learning curve is also a little steep, but the great plots you will produce are worth the time and effort.</p> <hr/> <h2 id="diagram-software">Diagram software</h2> <p>For your research, you will need to create beautiful figures for papers, posters, presentations, and finally your thesis. For these you will need good image creation software; don’t be that guy who scans hand-drawn diagrams and integrates these into his presentations :roll_eyes:. Two free image creation apps I recommend for this are <a href="https://www.yworks.com/products/yed">yEd</a> and <a href="https://inkscape.org/">Inkscape</a>. yEd is my personal favorite: it is simple yet powerful, very intuitive to use and lets you create decent figures in a very short time once you get a hold of it. On the other hand, Inkscape has great online tutorials which will help you learn quickly. I recently came across <a href="https://app.diagrams.net/">Draw.io</a>, a free online tool for making decent figures; you should check it out.</p> <p>If you use macOS, another alternative (not free) is <a href="https://www.omnigroup.com/omnigraffle/features/">OmniGraffle</a>.</p> <hr/> <h2 id="video-conferencing-and-team-communication">Video conferencing and Team communication</h2> <p>The recent health crisis and lockdowns forced many out of the office, and kept us confined to our homes, away from family, friends and team mates. Thus, there has been a rising popularity of video conferencing and online communication tools.</p> <p>For video conferencing and team communication, I recommend <a href="https://discord.com/">Discord</a> and <a href="https://slack.com/intl/en-ch/">Slack</a> respectively. Both have free versions which are good enough for everyday usage. Another great free tool you can try for video conferencing is <a href="https://bigbluebutton.org/">BigBlueButton</a>. Other alternatives include <a href="https://zoom.us/">Zoom</a> and <a href="https://whereby.com/user">Whereby</a>. These have free and paid versions but the free versions are good enough for small and short online meetings.</p> <hr/> <p>Now thats all I have for you today. I hope you find these tools useful for your work. Stay tuned for the next tips in my tech diaries :v: .</p>]]></content><author><name></name></author><summary type="html"><![CDATA[useful software for graduate research.]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="https://yuhala.github.io/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams"/><published>2021-07-04T19:39:00+02:00</published><updated>2021-07-04T19:39:00+02:00</updated><id>https://yuhala.github.io/blog/2021/diagrams</id><content type="html" xml:base="https://yuhala.github.io/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>. Previously, this was done using the <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. For more information on this matter, see the <a href="https://github.com/alshedivat/al-folio/issues/1609#issuecomment-1656995674">related issue</a>. To disable the zooming feature, set <code class="language-plaintext highlighter-rouge">mermaid.zoomable</code> to <code class="language-plaintext highlighter-rouge">false</code> in this post frontmatter.</p> <h2 id="mermaid">Mermaid</h2> <p>The diagram below was generated by the following code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">mermaid
</span><span class="sb">sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!</span>
<span class="p">```</span>
</code></pre></div></div> <pre><code class="language-mermaid">sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
</code></pre>]]></content><author><name></name></author><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://yuhala.github.io/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter"/><published>2020-09-28T17:12:00+02:00</published><updated>2020-09-28T17:12:00+02:00</updated><id>https://yuhala.github.io/blog/2020/twitter</id><content type="html" xml:base="https://yuhala.github.io/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p> <h1 id="tweet">Tweet</h1> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="timeline">Timeline</h1> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="additional-details">Additional Details</h1> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="formatting"/><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with math</title><link href="https://yuhala.github.io/blog/2015/math/" rel="alternate" type="text/html" title="a post with math"/><published>2015-10-20T17:12:00+02:00</published><updated>2015-10-20T17:12:00+02:00</updated><id>https://yuhala.github.io/blog/2015/math</id><content type="html" xml:base="https://yuhala.github.io/blog/2015/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum<em>{k=1}^n a_k b_k \right)^2 \leq \left( \sum</em>{k=1}^n a<em>k^2 \right) \left( \sum</em>{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry></feed>